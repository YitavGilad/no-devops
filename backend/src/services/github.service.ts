import { Octokit } from '@octokit/rest';
import type { CreateRepoParams, CreateRepoResponse } from '../types/github.types';

export class GitHubService {
  private octokit: Octokit;
  private username: string;

  constructor(token: string, username: string) {
    console.log('Initializing GitHub service with username:', username);
    if (!token) {
      console.error('No GitHub token provided');
      throw new Error('GitHub token is required');
    }
    this.octokit = new Octokit({
      auth: token
    });
    this.username = username;
  }

  async createRepository(params: CreateRepoParams): Promise<CreateRepoResponse> {
    // Verify GitHub token is valid
    try {
      const { data: user } = await this.octokit.users.getAuthenticated();
      console.log('Authenticated as GitHub user:', user.login);
    } catch (error) {
      console.error('Failed to authenticate with GitHub:', error);
      return {
        success: false,
        error: 'Invalid GitHub token or insufficient permissions'
      };
    }
    try {
      // Create the repository
      const { data: repo } = await this.octokit.repos.createForAuthenticatedUser({
        name: params.name,
        description: params.description || `A ${params.framework} project generated by Vibe Coding Generator`,
        private: params.private ?? true,
        auto_init: true
      });

      // Add initial files based on framework
      await this.initializeRepository(repo.name, params);

      return {
        success: true,
        data: {
          id: repo.id,
          name: repo.name,
          fullName: repo.full_name,
          url: repo.html_url,
          cloneUrl: repo.clone_url,
          private: repo.private,
          createdAt: repo.created_at
        }
      };
    } catch (error: any) {
      console.error('GitHub API error:', error?.response?.data || error.message);
      return {
        success: false,
        error: error.message || 'Failed to create repository'
      };
    }
  }

  private async initializeRepository(repoName: string, params: CreateRepoParams): Promise<void> {
    // Add README.md
    await this.octokit.repos.createOrUpdateFileContents({
      owner: this.username,
      repo: repoName,
      path: 'README.md',
      message: 'Initial commit: Add README.md',
      content: Buffer.from(this.generateReadme(params)).toString('base64')
    });

    // Add .gitignore
    await this.octokit.repos.createOrUpdateFileContents({
      owner: this.username,
      repo: repoName,
      path: '.gitignore',
      message: 'Add .gitignore',
      content: Buffer.from(this.generateGitignore(params.language)).toString('base64')
    });

    // Add GitHub Actions workflow
    await this.octokit.repos.createOrUpdateFileContents({
      owner: this.username,
      repo: repoName,
      path: '.github/workflows/ci.yml',
      message: 'Add GitHub Actions workflow',
      content: Buffer.from(this.generateWorkflow(params)).toString('base64')
    });
  }

  private generateReadme(params: CreateRepoParams): string {
    return `# ${params.name}

A ${params.framework} project generated by Vibe Coding Generator.

## Technology Stack

- Language: ${params.language}
- Framework: ${params.framework}

## Getting Started

1. Clone the repository
\`\`\`bash
git clone https://github.com/${this.username}/${params.name}.git
cd ${params.name}
\`\`\`

2. Install dependencies
\`\`\`bash
${params.language === 'javascript' ? 'npm install' : 
  params.language === 'python' ? 'pip install -r requirements.txt' :
  'mvn install'}
\`\`\`

3. Run the development server
\`\`\`bash
${params.language === 'javascript' ? 'npm run dev' :
  params.language === 'python' ? 'python main.py' :
  './mvnw spring-boot:run'}
\`\`\`
`;
  }

  private generateGitignore(language: string): string {
    const commonIgnores = [
      '.DS_Store',
      '.env',
      '.env.local',
      '.env.*.local',
      '*.log',
      'logs/',
      'dist/',
      'coverage/',
      '.idea/',
      '.vscode/'
    ];

    const languageSpecificIgnores: Record<string, string[]> = {
      javascript: [
        'node_modules/',
        'npm-debug.log*',
        'yarn-debug.log*',
        'yarn-error.log*',
        '.next/',
        'build/',
        '.cache/'
      ],
      python: [
        '__pycache__/',
        '*.py[cod]',
        '*$py.class',
        '*.so',
        '.Python',
        'env/',
        'venv/',
        'ENV/',
        'build/',
        'develop-eggs/',
        'downloads/',
        'eggs/',
        '.eggs/',
        'lib/',
        'lib64/',
        'parts/',
        'sdist/',
        'var/',
        '*.egg-info/',
        '.installed.cfg',
        '*.egg'
      ],
      java: [
        'target/',
        '*.class',
        '*.jar',
        '*.war',
        '*.ear',
        '*.logs',
        '.project',
        '.classpath',
        '.settings/',
        'bin/',
        '.gradle/'
      ]
    };

    return [...commonIgnores, ...(languageSpecificIgnores[language] || [])]
      .join('\n');
  }

  private generateWorkflow(params: CreateRepoParams): string {
    const workflows: Record<string, string> = {
      javascript: `name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build
      run: npm run build`,

      python: `name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest`,

      java: `name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Run tests
      run: mvn test`
    };

    return workflows[params.language] || workflows.javascript;
  }
}
